{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "accadf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_git')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_git_files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "git_dim",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sink_git",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-12T12:35:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_required_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "raw_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFileMacthes",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "IfFileNameMacthes",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(item().name,'Fact')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyMatchedFile",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "source_Matched_file",
														"type": "DatasetReference",
														"parameters": {
															"p_file_name": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "sink_matched_File",
														"type": "DatasetReference",
														"parameters": {
															"p_file_name": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-12T17:44:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_transform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataflow_psource",
								"type": "DatasetReference"
							},
							"name": "patientsource"
						},
						{
							"dataset": {
								"referenceName": "dataflow_dsource",
								"type": "DatasetReference"
							},
							"name": "diagnosissource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "final_data",
								"type": "DatasetReference"
							},
							"name": "sinkdata"
						}
					],
					"transformations": [
						{
							"name": "JoinOperation"
						},
						{
							"name": "requiredColumns",
							"description": "selecting only the required columns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          patient_id as string,",
						"          name as string,",
						"          age as short,",
						"          gender as string,",
						"          address as string,",
						"          contact_number as string,",
						"          admission_date as date,",
						"          diagnosis_code as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> patientsource",
						"source(output(",
						"          diagnosis_code as string,",
						"          diagnosis_description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> diagnosissource",
						"patientsource, diagnosissource join(patientsource@diagnosis_code == diagnosissource@diagnosis_code,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> JoinOperation",
						"JoinOperation select(mapColumn(",
						"          patient_id,",
						"          name,",
						"          age,",
						"          gender,",
						"          address,",
						"          contact_number,",
						"          admission_date,",
						"          diagnosis_code = patientsource@diagnosis_code,",
						"          diagnosis_code = diagnosissource@diagnosis_code,",
						"          diagnosis_description",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> requiredColumns",
						"requiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkdata"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowtransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataflow_claims_source",
								"type": "DatasetReference"
							},
							"name": "fclaims"
						},
						{
							"dataset": {
								"referenceName": "dataflow_source_adjustments",
								"type": "DatasetReference"
							},
							"name": "fadjustments"
						},
						{
							"dataset": {
								"referenceName": "dataflow_source_payments",
								"type": "DatasetReference"
							},
							"name": "fpayments"
						},
						{
							"dataset": {
								"referenceName": "dataflow_source_payers",
								"type": "DatasetReference"
							},
							"name": "dpayers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "final_data",
								"type": "DatasetReference"
							},
							"name": "sinkFinalAR",
							"description": "loading the data related to accounts receivable to the final layer"
						}
					],
					"transformations": [
						{
							"name": "aggregateOperation1"
						},
						{
							"name": "aggregateOperation2"
						},
						{
							"name": "claimsJadjustments"
						},
						{
							"name": "claimsJpayments"
						},
						{
							"name": "claimsJpayers"
						},
						{
							"name": "DerviedColumns",
							"description": "creating a new column"
						}
					],
					"scriptLines": [
						"source(output(",
						"          claim_id as string,",
						"          patient_id as string,",
						"          payer_id as string,",
						"          billing_date as date,",
						"          total_charge as double,",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> fclaims",
						"source(output(",
						"          adjustment_id as string,",
						"          claim_id as string,",
						"          adjustment_amount as double,",
						"          adjustment_reason as string,",
						"          adjustment_date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> fadjustments",
						"source(output(",
						"          payment_id as string,",
						"          claim_id as string,",
						"          paid_amount as double,",
						"          payment_date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> fpayments",
						"source(output(",
						"          payer_id as string,",
						"          payer_name as string,",
						"          payer_type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dpayers",
						"fadjustments aggregate(groupBy(claim_id),",
						"     total_adjustment = round(sum(adjustment_amount),2),",
						"          last_adjustment_date = max(adjustment_date)) ~> aggregateOperation1",
						"fpayments aggregate(groupBy(claim_id),",
						"     total_paid = round(sum(paid_amount), 2),",
						"          last_payment_date = max(payment_date)) ~> aggregateOperation2",
						"fclaims, aggregateOperation1 join(fclaims@claim_id == aggregateOperation1@claim_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> claimsJadjustments",
						"claimsJadjustments, aggregateOperation2 join(fclaims@claim_id == aggregateOperation2@claim_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> claimsJpayments",
						"claimsJpayments, dpayers join(fclaims@payer_id == dpayers@payer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> claimsJpayers",
						"claimsJpayers derive(receivable_amount = round(coalesce(total_charge, 0) + coalesce(total_adjustment, 0) - coalesce(total_paid, 0), 2)) ~> DerviedColumns",
						"DerviedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkFinalAR"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master_healthcare_RCM_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute_Git",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_git",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute_files",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_required_files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DataTransformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Execute_Git",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute_files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowtransform",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"fclaims": {},
									"fadjustments": {},
									"fpayments": {},
									"dpayers": {},
									"sinkFinalAR": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteStagingFiles",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DataTransformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DeleteStageFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-13T06:54:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline_git')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline_required_files')]",
				"[concat(variables('factoryId'), '/dataflows/dataflowtransform')]"
			]
		}
	]
}